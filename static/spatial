#!/usr/bin/env python

from argparse import ArgumentParser
import os, sys, datetime

def main():
  usage = "Usage: %prog <application runner> [staging args] [options]"
  parser = ArgumentParser(description='SPATIAL')
  parser.add_argument('--DSE', dest='dse', action='store_true',default=False, help='enables design space exploration')
  parser.add_argument('--debug', dest='debug', action='store_true', default=False, help='enables Spatial debugging output')
  parser.add_argument('--debuglast', dest='debuglast', action='store_true', default=False, help='enables Spatial print last IR output')
  parser.add_argument('--latency', dest='latency', action='store_true', default=False, help='enables Spatial print latency estimates')
  parser.add_argument('--models', dest='loud_models', action='store_true', default=False, help='enables output from Spatial area and latency models')
  parser.add_argument('-v', dest='verbose', action='store_true', default=False, help='enables basic status output from Spatial')
  parser.add_argument('--nolog', dest='no_log', action='store_true', default=False, help='disables logging of compiler')
  parser.add_argument("--cpp", dest="cpp", action="store_true", default=True, help="enables cpp generation")
  parser.add_argument("--dot", dest="dot", action="store_true", default=False, help="enables dot generation")
  parser.add_argument("--maxj", dest="maxj", action="store_true", default=False, help="enables maxj generation")
  parser.add_argument("--outdir", dest="outdir", default="out", help="location of output dir, relative to publish dir")
  parser.add_argument('--test', dest="test", action="store_true", default=False, help="enables Scala testing mode")

  # Plasticine work
  parser.add_argument('--CGRA+', dest='allCGRA', action="store_true", default=False, help="enable ALL PIR features")
  parser.add_argument('--pdse', dest='pdse', action="store_true", default=False, help="enable CGRA DSE")
  parser.add_argument('--CGRA', dest='cgra', action='store_true', default=True, help='enables PIR generation')
  parser.add_argument('--pdebug', dest='pir_debug', action='store_true', default=False, help='enables PIR debugging output')
  parser.add_argument('--split', dest='split', action="store_true", default=False, help="enable PIR CU splitting")

  (opts, args) = parser.parse_known_args()
  if len(args) < 1:
    parser.error("An application file must be passed to delitec as an argument")

  java_opts = os.getenv("JAVA_OPTS", "")

  if opts.allCGRA == True:
    opts.pdse = True
    opts.cgra = True
    opts.pir_debug = True
    opts.split = True
    opts.debug = True

  if opts.test == True or opts.cgra == True:
    opts.maxj = False
    opts.cpp = False

  if opts.dse == True:
    java_opts = java_opts + " -Dspatial.dse=true"
  if opts.debug == True:
    java_opts = java_opts + " -Dspatial.debugging=true"
  if opts.debuglast == True:
    java_opts = java_opts + " -Dspatial.debugginglast=true"
  if opts.loud_models == True:
    java_opts = java_opts + " -Dspatial.loudmodels=true"
  if opts.verbose == True:
    java_opts = java_opts + " -Dspatial.verbose=true"

  logCompile = ""
  if opts.no_log == False:
    logCompile = ' 2>&1 | tee compile.log'

  if opts.dot == True:
    java_opts = java_opts + " -Ddelite.generate.dot"
  if opts.maxj == True:
    java_opts = java_opts + " -Ddelite.generate.maxj"
  if opts.cpp == True:
    java_opts = java_opts + " -Ddelite.generate.cpp"

  if opts.pir_debug == True:
    java_opts = java_opts + " -Dspatial.pirdebug=true"
  if opts.cgra == True:
    java_opts = java_opts + " -Dspatial.cgra=true"
  if opts.pdse == True:
    java_opts = java_opts + " -Dspatial.pdse=true"
  if opts.split == True:
    java_opts = java_opts + " -Dspatial.split=true"

  ## Should only set for child processes
  os.environ["JAVA_OPTS"] = java_opts

  deliteArgs = ' '.join(args)

  SPATIAL_HOME = os.getenv("SPATIAL_HOME", "")
  if SPATIAL_HOME == "":
    print 'SPATIAL_HOME is undefined.'
    try:
      SPATIAL_HOME = input('SPATIAL_HOME [enter to use current directory]: ')
    except:
      SPATIAL_HOME = os.getcwd()

  ## TODO: How to determine publish directory?
  publish = SPATIAL_HOME + "/published/Spatial/"
  os.system(publish + 'bin/delitec ' + deliteArgs + ' --dump_exception 2>&1 | tee compile.log')

  if not opts.no_log:
    print 'Parsing log'
    os.system(publish + 'bin/parse-log.py')

  if opts.maxj and opts.cpp:
    print 'Running Spatial with arguments: ' + ' '.join(args[1:])
    if opts.outdir == "out":
      os.system(publish + 'bin/delite ' + args[0] + ' --no-jvm --no-compile --cpp=1 --maxj=1 --codecache=' + os.getenv("HYPER_HOME", "") + '/spatial/published/Spatial/out ' + ' '.join(args[1:]) + ' 2>&1 | tee run.log')
    else:
      os.system(publish + 'bin/delite ' + args[0] + ' --no-jvm --no-compile --cpp=1 --maxj=1 --codecache=' + opts.outdir + ' ' + ' '.join(args[1:]) + ' 2>&1 | tee run.log')
  elif opts.test:
    print 'Running Spatial Scala Test with arguments: ' + ' '.join(args[1:])
    os.system(publish + 'bin/delite ' + args[0] + ' --codecache=' + opts.outdir + ' ' + ' '.join(args[1:]) + ' 2>&1 | tee run.log')

if __name__ == "__main__":
    main()
